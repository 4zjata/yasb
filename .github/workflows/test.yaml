name: test

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Fetch all history for tags
 

    - name: Get Previous Tag
      id: get_prev_tag
      run: |
        $prev_tag = git describe --tags --abbrev=0 HEAD^ 2>$null
        echo "PREV_TAG=$prev_tag" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "Previous tag: $prev_tag"
      shell: pwsh


    - name: Create Changelog
      id: changelog
      uses: loopwerk/tag-changelog@v1
      with:
        token: ${{ secrets.PAT }}

    - name: Generate Changelog from commits
      id: changelog_commits
      run: |
        echo "Using previous tag: $env:PREV_TAG"
        $changelog = git log ${{ env.PREV_TAG }}..HEAD --pretty=format:"* %s (%h)"
        $changelogString = $changelog | Out-String
        $changelogBase64 = [Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes($changelogString))
        echo "CHANGELOG=$changelogBase64" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      shell: pwsh

    - name: Decode Changelog from commits
      id: decode_changelog
      run: |
        $changelogDecoded = [Text.Encoding]::UTF8.GetString([Convert]::FromBase64String($env:CHANGELOG))
        if (-not [string]::IsNullOrEmpty($changelogDecoded)) {
          $changelogWithHeader = "## Other's`n`n$changelogDecoded"
          echo "DECODED_CHANGELOG<<EOF" >> $env:GITHUB_ENV
          echo "$changelogWithHeader" >> $env:GITHUB_ENV
          echo "EOF" >> $env:GITHUB_ENV
        } else {
          echo "No changes detected."
        }
      shell: pwsh

    - name: Check Changelog
      id: echo
      run: |
        echo "Changelog:  ${{ env.DECODED_CHANGELOG }}"
 
